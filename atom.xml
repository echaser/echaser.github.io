<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>echaser</title>
  
  <subtitle>迷途知返</subtitle>
  <link href="https://www.echaser.cn/atom.xml" rel="self"/>
  
  <link href="https://www.echaser.cn/"/>
  <updated>2022-06-27T01:52:06.432Z</updated>
  <id>https://www.echaser.cn/</id>
  
  <author>
    <name>Jack Li</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux下Docker安装SonarQube（PostgreSQL）</title>
    <link href="https://www.echaser.cn/2021/07/02/linux-xia-docker-an-zhuang-sonarqube-postgresql/"/>
    <id>https://www.echaser.cn/2021/07/02/linux-xia-docker-an-zhuang-sonarqube-postgresql/</id>
    <published>2021-07-02T04:13:21.000Z</published>
    <updated>2022-06-27T01:52:06.432Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><a href="http://www.sonarqube.org/"><em>SonarQube</em></a>是一种自动代码审查工具，用于检测代码中的错误、漏洞和代码异味。 它可以与现有的工作流程集成，以支持跨项目分支和拉取请求的持续代码检查。</p><p>本文基于_Linux_操作系统，在_Docker_容器中部署_SonarQube_服务，并进行简单的配置和使用。_SonarQube_在<code>7.8</code>版本之后不再支持_Mysql_数据库，教程选用的是最新版本的<a href="https://www.postgresql.org/"><em>Postgresql</em></a>数据库，_SonarQube_使用的版本是_8.8-community_。</p><h4 id="1-安装Postgresql"><a href="#1-安装Postgresql" class="headerlink" title="1.安装Postgresql"></a>1.安装Postgresql</h4><h5 id="1-1-下载-PostgreSQL镜像"><a href="#1-1-下载-PostgreSQL镜像" class="headerlink" title="1.1 下载 PostgreSQL镜像"></a>1.1 下载 <a href="https://hub.docker.com/_/postgres">PostgreSQL镜像</a></h5><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull postgres</span><br></pre></td></tr></tbody></table></figure><h5 id="1-2-启动容器"><a href="#1-2-启动容器" class="headerlink" title="1.2 启动容器"></a>1.2 启动容器</h5><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5432:5432 -v /data/postgres:/var/lib/postgresql/data -e POSTGRES_PASSWORD=123456 -e ALLOW_IP_RANGE=0.0.0.0/0 --name postgres postgres</span><br></pre></td></tr></tbody></table></figure><p>参数说明：</p><p>POSTGRES_PASSWORD 是数据库初始密码</p><p>ALLOW_IP_RANGE=0.0.0.0/0 允许任何主机访问</p><h5 id="1-3-进入postgres容器"><a href="#1-3-进入postgres容器" class="headerlink" title="1.3 进入postgres容器"></a>1.3 进入postgres容器</h5><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it postgres bash</span><br></pre></td></tr></tbody></table></figure><p><code>注意:</code> 这里的<code>postgres</code>是<code>1.2</code>中<code>--name</code>的参数</p><h5 id="1-4-使用默认用户postgres创建SonarQube数据库"><a href="#1-4-使用默认用户postgres创建SonarQube数据库" class="headerlink" title="1.4 使用默认用户postgres创建SonarQube数据库"></a>1.4 使用默认用户<code>postgres</code>创建<code>SonarQube</code>数据库</h5><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换postgres用户</span></span><br><span class="line">su postgres</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入数据库</span></span><br><span class="line">psql</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建sonar数据库</span></span><br><span class="line">CREATE DATABASE sonar;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出数据库</span></span><br><span class="line">\q</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出postgres用户</span></span><br><span class="line">exit</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出容器</span></span><br><span class="line">exit</span><br></pre></td></tr></tbody></table></figure><h4 id="2-部署SonarQube"><a href="#2-部署SonarQube" class="headerlink" title="2. 部署SonarQube"></a>2. 部署SonarQube</h4><h5 id="2-1-下载SonarQube镜像"><a href="#2-1-下载SonarQube镜像" class="headerlink" title="2.1 下载SonarQube镜像"></a>2.1 下载<a href="https://hub.docker.com/_/sonarqube">SonarQube镜像</a></h5><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull sonarqube:8.8-community</span><br></pre></td></tr></tbody></table></figure><h5 id="2-2-创建Volume-可忽略此步骤"><a href="#2-2-创建Volume-可忽略此步骤" class="headerlink" title="2.2 创建Volume(可忽略此步骤)"></a>2.2 创建Volume(可忽略此步骤)</h5><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker volume create --name sonarqube_data</span><br><span class="line">docker volume create --name sonarqube_logs</span><br><span class="line">docker volume create --name sonarqube_extensions</span><br><span class="line">docker volume create --name sonarqube_conf</span><br></pre></td></tr></tbody></table></figure><h5 id="2-3-启动容器"><a href="#2-3-启动容器" class="headerlink" title="2.3 启动容器"></a>2.3 启动容器</h5><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name sonarqube \</span><br><span class="line">    -p 9000:9000 \</span><br><span class="line">    -e SONAR_JDBC_URL=jdbc:postgresql://192.168.14.5:5432/sonar \</span><br><span class="line">    -e SONAR_JDBC_USERNAME=postgres \</span><br><span class="line">    -e SONAR_JDBC_PASSWORD=123456 \</span><br><span class="line">    -v sonarqube_data:/opt/sonarqube/data \</span><br><span class="line">    -v sonarqube_extensions:/opt/sonarqube/extensions \</span><br><span class="line">    -v sonarqube_logs:/opt/sonarqube/logs \</span><br><span class="line">    -v sonarqube_conf:/opt/sonarqube/conf \</span><br><span class="line">    sonarqube:8.8-community</span><br></pre></td></tr></tbody></table></figure><p><code>docker logs \-f sonarqube</code> 查看日志发现报错</p><p><img src="https://img-blog.csdnimg.cn/20210702112812512.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70#pic_center" alt="错误日志"></p><p>修改配置</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysctl.conf</span><br></pre></td></tr></tbody></table></figure><p>最后一行添加<code>vm.max_map_count=262144</code>，保存退出<br>加载使其生效</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></tbody></table></figure><p>重新启动容器</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start sonarqube</span><br></pre></td></tr></tbody></table></figure><p>浏览器访问<code>http://主机IP:9000</code>,使用默认账号(admin)密码(admin)登录，根据提示修改原始密码</p><h4 id="3-配置SonalQube"><a href="#3-配置SonalQube" class="headerlink" title="3.配置SonalQube"></a>3.配置SonalQube</h4><h5 id="3-1-生成密钥"><a href="#3-1-生成密钥" class="headerlink" title="3.1 生成密钥"></a>3.1 生成密钥</h5><p>_Administration &gt; Security &gt; Users_，选择用户_Tokens_一栏，根据提示在_Generate Tokens_输入框中输入Token名称，点击_Generate_生成Token，点击_Copy_复制保存。</p><p><img src="https://img-blog.csdnimg.cn/20210702113013570.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70#pic_center" alt="找到Token生成"><br><img src="https://img-blog.csdnimg.cn/2021070211310418.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70#pic_center" alt="生成Token"></p><p>**<code>注意</code>**：这里的复制_Token_界面一旦关闭，无法再次查看_Token_内容，请妥善保存</p><h5 id="3-2-用户Token"><a href="#3-2-用户Token" class="headerlink" title="3.2 用户Token"></a>3.2 用户Token</h5><p>_Token_可以调用_SonarQube_相关API，以进行调试及开发。</p><h6 id="3-2-1-代码调试（以GO为例）"><a href="#3-2-1-代码调试（以GO为例）" class="headerlink" title="3.2.1 代码调试（以GO为例）"></a>3.2.1 代码调试（以GO为例）</h6><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"net/url"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> createPro = <span class="string">"http://192.168.14.5:9000/api/projects/create"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">v := url.Values{}</span><br><span class="line">v.Add(<span class="string">"name"</span>, <span class="string">"test"</span>)</span><br><span class="line">v.Add(<span class="string">"project"</span>, <span class="string">"test"</span>)</span><br><span class="line">v.Add(<span class="string">"visibility"</span>, <span class="string">"public"</span>)</span><br><span class="line">fmt.Println(v.Encode())</span><br><span class="line">req, err := http.NewRequest(<span class="string">"POST"</span>, createPro, strings.NewReader(v.Encode()))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">// 这里的username可直接使用生成的Token，无需密码；或直接用账号密码进行验证</span></span><br><span class="line">req.SetBasicAuth(<span class="string">"3cf069236f72e95a64aad2b5714fb717ca080249"</span>, <span class="string">""</span>)</span><br><span class="line">req.Header.Set(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>)</span><br><span class="line">resp, err := http.DefaultClient.Do(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">}</span><br><span class="line">fmt.Println(resp.StatusCode)</span><br><span class="line">data, err := ioutil.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">fmt.Println(<span class="type">string</span>(data))</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h6 id="3-2-2-Postman调试"><a href="#3-2-2-Postman调试" class="headerlink" title="3.2.2 Postman调试"></a>3.2.2 Postman调试</h6><ol><li><p>填写请求路径</p></li><li><p>点击_Authorization_，Type选择_Basic Auth_，在_username_中填写刚才生成的_Token_<img src="https://img-blog.csdnimg.cn/20210702113243936.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70#pic_center" alt="Authorization"></p></li><li><p>点击_Body_，选择_x-www-form-urlencoded_，填写所需_Key-Value_参数</p></li><li><p>发送请求<br><img src="https://img-blog.csdnimg.cn/20210702113328298.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70#pic_center" alt="发送请求"></p></li></ol><h5 id="3-2-汉化-可选"><a href="#3-2-汉化-可选" class="headerlink" title="3.2 汉化(可选)"></a>3.2 汉化(可选)</h5><p><em>Administration &gt; Marketplace &gt; Plugins</em>,搜索_Chinese_，选择对应插件安装，稍等片刻即可安装成功，页面上方会出现_重启服务_和_重置_选择按钮，按需选择就行了，个人觉得英文界面好用一些<br><img src="https://img-blog.csdnimg.cn/20210702113350625.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70#pic_center" alt="汉化"></p><h4 id="4-SonarQube的使用"><a href="#4-SonarQube的使用" class="headerlink" title="4.SonarQube的使用"></a>4.SonarQube的使用</h4><h5 id="4-1-安装SonarScanner-其他安装方式请参照官方文档"><a href="#4-1-安装SonarScanner-其他安装方式请参照官方文档" class="headerlink" title="4.1 安装SonarScanner(其他安装方式请参照官方文档)"></a>4.1 安装SonarScanner(其他安装方式请参照<a href="https://docs.sonarqube.org/latest/analysis/scan/sonarscanner/"><em>官方文档</em></a>)</h5><h6 id="4-1-1-下载二进制安装包"><a href="#4-1-1-下载二进制安装包" class="headerlink" title="4.1.1 下载二进制安装包"></a>4.1.1 下载二进制安装包</h6><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip</span><br></pre></td></tr></tbody></table></figure><h6 id="4-1-2-解压"><a href="#4-1-2-解压" class="headerlink" title="4.1.2 解压"></a>4.1.2 解压</h6><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip sonar-scanner-cli-4.6.2.2472-linux.zip -d /usr/local/</span><br></pre></td></tr></tbody></table></figure><h6 id="4-1-3-添加到PATH（建立软连接）"><a href="#4-1-3-添加到PATH（建立软连接）" class="headerlink" title="4.1.3 添加到PATH（建立软连接）"></a>4.1.3 添加到PATH（建立软连接）</h6><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/sonar-scanner-4.6.2.2472-linux/bin/sonar-scanner /usr/bin/</span><br><span class="line"></span><br><span class="line">ln -s /usr/local/sonar-scanner-4.6.2.2472-linux/bin/sonar-scanner-debug /usr/bin/</span><br></pre></td></tr></tbody></table></figure><p>测试安装是否成功</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sonar-scanner -h</span><br></pre></td></tr></tbody></table></figure><p>输出如下信息，证明安装无误</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">INFO: </span><br><span class="line">INFO: usage: sonar-scanner [options]</span><br><span class="line">INFO: </span><br><span class="line">INFO: Options:</span><br><span class="line">INFO:  -D,--define &lt;arg&gt;     Define property</span><br><span class="line">INFO:  -h,--help             Display help information</span><br><span class="line">INFO:  -v,--version          Display version information</span><br><span class="line">INFO:  -X,--debug            Produce execution debug output</span><br></pre></td></tr></tbody></table></figure><h5 id="4-2-生成扫描代码"><a href="#4-2-生成扫描代码" class="headerlink" title="4.2 生成扫描代码"></a>4.2 生成扫描代码</h5><h6 id="4-2-1-创建项目"><a href="#4-2-1-创建项目" class="headerlink" title="4.2.1 创建项目"></a>4.2.1 创建项目</h6><ol><li><p>登录_SonarQube_服务界面，点击_Create new project &gt; Manually_或右上角_Add project &gt; Manually_</p></li><li><p>输入合法的_Project key_和_Display name_，点击_Set up_<img src="https://img-blog.csdnimg.cn/20210702113628479.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70#pic_center" alt="create project"></p></li><li><p>填写一个_Token_名称生成新的_Token_，或使用上面生成的_Token_，点击_Continue_继续下一步<img src="https://img-blog.csdnimg.cn/20210702113707751.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70#pic_center" alt="填写Token"></p></li><li><p>选择合适选项，生成如下扫描代码(因为之前已经安装好_SonarScanner_，故忽略_Download_步骤)</p></li></ol><p><img src="https://img-blog.csdnimg.cn/20210702113834576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70#pic_center" alt="生成扫描代码"></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sonar-scanner \</span><br><span class="line">  -Dsonar.projectKey=test \</span><br><span class="line">  -Dsonar.sources=. \</span><br><span class="line">  -Dsonar.host.url=http://192.168.14.5:9000 \</span><br><span class="line">  -Dsonar.login=3cf069236f72e95a64aad2b5714fb717ca080249</span><br></pre></td></tr></tbody></table></figure><p>如果你想获取更详细的_Debug_信息，可在命令后面添加以下任一参数</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-X，--verbose, -Dsonar.verbose=true</span><br></pre></td></tr></tbody></table></figure><p>更多参数请参照<a href="https://docs.sonarqube.org/latest/analysis/analysis-parameters/"><em>官方文档</em></a></p><p>参数解析：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-Dsonar.projectKey 项目名称，扫描完毕后会将数据发送给对应的项目</span><br><span class="line"></span><br><span class="line">-Dsonar.sources 代码目录，默认值是`.`，表示当前目录，故该命令应在代码根目录下执行</span><br><span class="line"></span><br><span class="line">-Dsonar.host.url 服务器地址</span><br><span class="line"></span><br><span class="line">-Dsonar.login 登录Token</span><br></pre></td></tr></tbody></table></figure><h5 id="4-3-执行扫描"><a href="#4-3-执行扫描" class="headerlink" title="4.3 执行扫描"></a>4.3 执行扫描</h5><p>点击_Copy_复制扫描代码，在已安装_SonarScanner_的服务上的代码根目录执行<br>出现如下日志说明扫描完毕，此时可刷新管理界面或直接访问日志中的_<a href="http://192.168.14.5:9000/dashboard/?id=test">http://192.168.14.5:9000/dashboard\?id=test</a>_ 查看扫描结果</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">INFO: Analysis report generated in 114ms, dir size=156 KB</span><br><span class="line">INFO: Analysis report compressed in 299ms, zip size=81 KB</span><br><span class="line">INFO: Analysis report uploaded in 174ms</span><br><span class="line">INFO: ANALYSIS SUCCESSFUL, you can browse http://192.168.14.5:9000/dashboard?id=test</span><br><span class="line">INFO: Note that you will be able to access the updated dashboard once the server has processed the submitted analysis report</span><br><span class="line">INFO: More about the report processing at http://192.168.14.5:9000/api/ce/task?id=AXplL1OzMN_oVHnT4W6t</span><br><span class="line">INFO: Analysis total time: 8.154 s</span><br><span class="line">INFO: ------------------------------------------------------------------------</span><br><span class="line">INFO: EXECUTION SUCCESS</span><br><span class="line">INFO: ------------------------------------------------------------------------</span><br><span class="line">INFO: Total time: 13.451s</span><br><span class="line">INFO: Final Memory: 13M/47M</span><br><span class="line">INFO: ------------------------------------------------------------------------</span><br></pre></td></tr></tbody></table></figure><p><em>本文是根据学习笔记整理而成，如有错误或不当之处，望各位读者海涵，同时欢迎各位留言或<a href="mailto:luckydog612@163.com">Email</a>批评指正，不胜感激。</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;a href=&quot;http://www.sonarqube.org/&quot;&gt;&lt;em&gt;SonarQube&lt;/em&gt;&lt;/a&gt;是一种自动代码审查工具，用于检测代码中的错误、漏洞和代码异味。 它可以与现有的工作流程集成，以支持跨项目分支</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.echaser.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Linux linux docker postgresql SonarQube" scheme="https://www.echaser.cn/tags/Linux-linux-docker-postgresql-SonarQube/"/>
    
  </entry>
  
  <entry>
    <title>Linux安装MySQL5.7（详细而简单）</title>
    <link href="https://www.echaser.cn/2020/07/19/linux-an-zhuang-mysql5.7-xiang-xi-er-jian-dan/"/>
    <id>https://www.echaser.cn/2020/07/19/linux-an-zhuang-mysql5.7-xiang-xi-er-jian-dan/</id>
    <published>2020-07-18T22:32:20.000Z</published>
    <updated>2022-06-27T01:52:06.435Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/yum.repos.d/mysql-community.repo</span><br></pre></td></tr></tbody></table></figure><p><em>将以下代码复制进去</em></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Enable to use MySQL 5.7</span></span><br><span class="line">[mysql57-community]</span><br><span class="line">name=MySQL 5.7 Community Server</span><br><span class="line">baseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/7/$basearch/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><br></pre></td></tr></tbody></table></figure><p><em>安装</em></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mysql-community-server</span><br></pre></td></tr></tbody></table></figure><p><em>权限设置</em></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown mysql:mysql -R /var/lib/mysql</span><br></pre></td></tr></tbody></table></figure><p><em>初始化</em></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --initialize</span><br></pre></td></tr></tbody></table></figure><p><em>启动</em></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld</span><br></pre></td></tr></tbody></table></figure><p>如果报错：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Job for mysqld.service failed because the control process exited with error code. See "systemctl status mysqld.service" and "journalctl -xe" for details.</span><br></pre></td></tr></tbody></table></figure><p><em><code>Do this and star mysql again</code></em></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /var/lib/mysql</span><br></pre></td></tr></tbody></table></figure><p><em>查看运行状态</em></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mysqld</span><br></pre></td></tr></tbody></table></figure><p><em>获取默认密码并登陆MySQL</em></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">grep 'temporary password' /var/log/mysqld.log</span><br><span class="line">mysql -uroot -p</span><br><span class="line">use mysql;   #这一步如果报错，类似于下面这样，直接跳转下一步</span><br><span class="line">ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.</span><br></pre></td></tr></tbody></table></figure><p><em>重置密码（<code>密码尽量包含大小写以及数字，否则可能设置不成功，切记：复杂</code>）</em></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter user 'root'@'localhost' identified by 'Abc123';</span><br></pre></td></tr></tbody></table></figure><p><em>开启远程登录(如果需要远程连接的话)</em></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select user,host from user;</span><br></pre></td></tr></tbody></table></figure><p><em><code>修改前</code></em></p><table><thead><tr><th>user</th><th>host</th></tr></thead><tbody><tr><td>mysql.session</td><td>localhost</td></tr><tr><td>mysql.sys</td><td>localhost</td></tr><tr><td>root</td><td>localhost</td></tr></tbody></table><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update user set host='%' where user='root';</span><br></pre></td></tr></tbody></table></figure><p><em><code>修改后</code></em></p><table><thead><tr><th>user</th><th>host</th></tr></thead><tbody><tr><td>mysql.session</td><td>localhost</td></tr><tr><td>mysql.sys</td><td>localhost</td></tr><tr><td>root</td><td>%</td></tr></tbody></table><p><em>刷新权限</em></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></tbody></table></figure><p><em><code>其他参考命令</code></em></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service                              #停止firewall</span><br><span class="line">systemctl disable firewalld.service                           #禁止firewall开机启动</span><br><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent    #开放端口 </span><br><span class="line">firewall-cmd --zone=public --remove-port=3306/tcp --permanent #关闭端口</span><br><span class="line">firewall-cmd --reload                                         #重新载入以生效</span><br><span class="line">firewall-cmd --list-ports                                     #查看开放端口列表</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.echaser.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="数据库 mysql linux centos 数据库" scheme="https://www.echaser.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93-mysql-linux-centos-%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ的安装和使用（Linux）</title>
    <link href="https://www.echaser.cn/2020/07/19/rabbitmq-de-an-zhuang-he-shi-yong-linux/"/>
    <id>https://www.echaser.cn/2020/07/19/rabbitmq-de-an-zhuang-he-shi-yong-linux/</id>
    <published>2020-07-18T16:45:57.000Z</published>
    <updated>2022-06-27T01:52:06.435Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="1-安装相关依赖"><a href="#1-安装相关依赖" class="headerlink" title="1. 安装相关依赖"></a>1. 安装相关依赖</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install make gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-devel</span><br></pre></td></tr></tbody></table></figure><p><em><code>注意：进行下面步骤之前一定要做的事情</code></em></p><p>登陆<a href="https://www.rabbitmq.com/which-erlang.html">RabbitMQ官网</a>查询erlang与rabbitmq匹配版本</p><blockquote><p><code>版本一定要匹配！！！</code><br><code>版本一定要匹配！！！</code><br><code>版本一定要匹配！！！</code></p></blockquote><h3 id="2-安装Erlang"><a href="#2-安装Erlang" class="headerlink" title="2. 安装Erlang"></a>2. 安装Erlang</h3><p><em>下载</em></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://erlang.org/download/otp_src_21.3.tar.gz  </span><br></pre></td></tr></tbody></table></figure><p><em>解压</em></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf otp_src_21.3.tar.gz </span><br></pre></td></tr></tbody></table></figure><p><em>配置</em></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></tbody></table></figure><p><em>安装</em></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></tbody></table></figure><p><em>验证</em></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">erl</span><br></pre></td></tr></tbody></table></figure><p><code>出现类似以下提示表明安装成功!(可按Ctrl + C退出，一次不行多来几次)</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Erlang/OTP 21 [erts-10.3] [source] [64-bit] [smp:32:32] [ds:32:32:10] [async-threads:1] [hipe]</span><br><span class="line">Eshell V10.3  (abort with ^G)</span><br><span class="line"><span class="meta prompt_">1&gt; </span></span><br></pre></td></tr></tbody></table></figure><h3 id="3-安装RabbitMQ"><a href="#3-安装RabbitMQ" class="headerlink" title="3. 安装RabbitMQ"></a>3. 安装RabbitMQ</h3><p><em>下载</em></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.8.2/rabbitmq-server-generic-unix-3.8.2.tar.xz</span><br></pre></td></tr></tbody></table></figure><p><em>解压</em></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xz -d rabbitmq-server-generic-unix-3.8.2.tar.xz   -- 这一步解压出rabbitmq-server-generic-unix-3.8.2.tar文件</span><br><span class="line"> 继续解压</span><br><span class="line">tar -xvf rabbitmq-server-generic-unix-3.8.2.tar   -- 这一步解压出rabbitmq-server-generic-unix-3.8.2.tar</span><br></pre></td></tr></tbody></table></figure><p><code>无需编译安装</code></p><p><em>移动</em></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r rabbitmq_server-3.8.2 /usr/local/rabbitmq</span><br></pre></td></tr></tbody></table></figure><p><em>配置</em></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line">export PATH=/usr/local/rabbitmq/sbin:$PATH     -- 将此句加在文末</span><br><span class="line"> 保存退出</span><br><span class="line">source /etc/profile                            -- 使新配置生效</span><br></pre></td></tr></tbody></table></figure><h3 id="4-启动"><a href="#4-启动" class="headerlink" title="4. 启动"></a>4. 启动</h3><p><em>启用Web管理控制台</em></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></tbody></table></figure><p><em>后台启动</em></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-server -detached</span><br></pre></td></tr></tbody></table></figure><p><em><code>以下操作可选</code></em></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl start firewalld                                        -- 启动防火墙</span><br><span class="line">firewall-cmd --zone=public --add-port=15672/tcp --permanent      -- 开放15672端口</span><br><span class="line">firewall-cmd --zone=public --remove-port=15762/tcp --permanent   -- 关闭端口(此句可忽略，笔记)</span><br><span class="line">firewall-cmd --reload                                            -- 开放或关闭端口都需要执行以使操作生效</span><br><span class="line">firewall-cmd --list-ports                                        -- 查看已经开放的端口</span><br></pre></td></tr></tbody></table></figure><h3 id="5-使用RabbitMQ"><a href="#5-使用RabbitMQ" class="headerlink" title="5. 使用RabbitMQ"></a>5. 使用RabbitMQ</h3><p><em><code>以下操作需要切换目录到/usr/local/rabbitmq/sbin/ 或在RabbitMQ命令前加上此目录</code></em></p><p><em>创建用户(权限不够可在命令前加<code>sudo</code>)</em></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl add_user js 123456                      -- 添加用户</span><br><span class="line">rabbitmqctl set_user_tags js administrator          -- 设置用户身份</span><br><span class="line">rabbitmqctl set_permissions -p / js ".*" ".*" ".*"  -- 设置权限</span><br></pre></td></tr></tbody></table></figure><p><em>下载队列管理命令</em></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/rabbitmq/rabbitmq-management/v3.8.2/bin/rabbitmqadmin</span><br><span class="line">  或者</span><br><span class="line">wget http://127.0.0.1:15672/cli/rabbitmqadmin</span><br></pre></td></tr></tbody></table></figure><p><em>赋予权限</em></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x  rabbitmqadmin</span><br></pre></td></tr></tbody></table></figure><p><em>查询队列</em></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python rabbitmqadmin --vhost=vhost --username=username --password=password list queues</span><br><span class="line">例如：</span><br><span class="line">python rabbitmqadmin --vhost=/ --username=js --password=123456 list queues</span><br></pre></td></tr></tbody></table></figure><p><em>创建队列</em></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python rabbitmqadmin --vhost=/ --username=username --password=password  declare queue name=队列名称</span><br><span class="line"> 或者</span><br><span class="line">python rabbitmqadmin declare queue name=队列名称 auto_delete=false durable=true --vhost=/ --username=username --password=password</span><br><span class="line">例如：</span><br><span class="line">python rabbitmqadmin auto_delete=false durable=true --vhost=/ --username=js --password=123456 declare queue name=csdn</span><br></pre></td></tr></tbody></table></figure><p><em>删除队列</em></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python rabbitmqadmin --vhost=/ --username=username --password=password  delete queue name=队列名称</span><br><span class="line">例如：</span><br><span class="line">python rabbitmqadmin --vhost=/ --username=js --password=123456  delete queue name=队列名称</span><br></pre></td></tr></tbody></table></figure><p><em><code>作者：本文力致于整理一篇比较完整的RabbitMQ的安装和使用教程，此文基于本人多次部署服务器整理而成，以避免每次部署服务器重新搜罗资料，有任何问题或需要补充的请留言，诚与各位交流学习！</code></em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h3 id=&quot;1-安装相关依赖&quot;&gt;&lt;a href=&quot;#1-安装相关依赖&quot; class=&quot;headerlink&quot; title=&quot;1. 安装相关依赖&quot;&gt;&lt;/a&gt;1. 安装相关依赖&lt;/h3&gt;&lt;figure class=&quot;highlig</summary>
      
    
    
    
    <category term="Linux" scheme="https://www.echaser.cn/categories/Linux/"/>
    
    
    <category term="学习笔记 rabbitmq linux" scheme="https://www.echaser.cn/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-rabbitmq-linux/"/>
    
  </entry>
  
  <entry>
    <title>打印从1到最大的n位数(Golang)《剑指offer》</title>
    <link href="https://www.echaser.cn/2019/09/22/da-yin-cong-1-dao-zui-da-de-n-wei-shu-golang-jian-zhi-offer/"/>
    <id>https://www.echaser.cn/2019/09/22/da-yin-cong-1-dao-zui-da-de-n-wei-shu-golang-jian-zhi-offer/</id>
    <published>2019-09-22T11:59:17.000Z</published>
    <updated>2022-06-27T01:52:06.433Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>题目：输入数字n，按顺序打印从1到最大的n位十进制数。比如输入3，则打印出1,2,3一直到最大的3位数999。</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Print1ToMaxOfDigits</span><span class="params">(n <span class="type">int</span>)</span></span> {</span><br><span class="line"><span class="keyword">if</span> n &lt;= <span class="number">0</span> {</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">number := <span class="built_in">make</span>([]<span class="type">int</span>, n)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ {</span><br><span class="line">number[<span class="number">0</span>] = i</span><br><span class="line">print1ToMaxOfDigitsRecursively(number, n, <span class="number">0</span>)</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">print1ToMaxOfDigitsRecursively</span><span class="params">(number []<span class="type">int</span>, length <span class="type">int</span>, index <span class="type">int</span>)</span></span> {</span><br><span class="line"><span class="keyword">if</span> index == length<span class="number">-1</span> {</span><br><span class="line">printNumber(number)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ {</span><br><span class="line">number[index+<span class="number">1</span>] = i</span><br><span class="line">print1ToMaxOfDigitsRecursively(number, length, index+<span class="number">1</span>)</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printNumber</span><span class="params">(number []<span class="type">int</span>)</span></span> {</span><br><span class="line"><span class="keyword">var</span> isBeginning0 = <span class="literal">true</span></span><br><span class="line">length := <span class="built_in">len</span>(number)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; length; i++ {</span><br><span class="line"><span class="keyword">if</span> isBeginning0 &amp;&amp; number[i] != <span class="number">0</span> {</span><br><span class="line">isBeginning0 = <span class="literal">false</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !isBeginning0 {</span><br><span class="line">fmt.Printf(<span class="string">"%d"</span>, number[i])</span><br><span class="line"><span class="keyword">if</span> i == length<span class="number">-1</span> {</span><br><span class="line">fmt.Println()</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Github: <a href="https://github.com/luckydog612/algorithm">https://github.com/luckydog612/algorithm</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;题目：输入数字n，按顺序打印从1到最大的n位十进制数。比如输入3，则打印出</summary>
      
    
    
    
    <category term="算法" scheme="https://www.echaser.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="剑指offer golang Go" scheme="https://www.echaser.cn/tags/%E5%89%91%E6%8C%87offer-golang-Go/"/>
    
  </entry>
  
  <entry>
    <title>旋转数组的最小数字(Golang)《剑指offer》</title>
    <link href="https://www.echaser.cn/2019/08/02/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-golang-jian-zhi-offer/"/>
    <id>https://www.echaser.cn/2019/08/02/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-golang-jian-zhi-offer/</id>
    <published>2019-08-02T09:33:43.000Z</published>
    <updated>2022-06-27T01:52:06.433Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>题目：把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如：数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意：本题中应充分考虑特殊情况</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">finMinNum</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">int</span> {</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">0</span> {</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">}</span><br><span class="line">start := <span class="number">0</span></span><br><span class="line">end := <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">mid := start <span class="comment">// 如果第一个数字小于最后一个数字，那就说明该数组是有序的，直接返回第一个数字</span></span><br><span class="line"><span class="keyword">for</span> nums[start] &gt;= nums[end] {</span><br><span class="line"><span class="keyword">if</span> end-start == <span class="number">1</span> {</span><br><span class="line">mid = end</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">}</span><br><span class="line">mid = (start + end) / <span class="number">2</span></span><br><span class="line"><span class="comment">// 如果第一个、最后一个和中间的数字都相等，那么只能按照顺序查找</span></span><br><span class="line"><span class="keyword">if</span> nums[start] == nums[mid] &amp;&amp; nums[mid] == nums[end] {</span><br><span class="line"><span class="keyword">return</span> finMinInOrder(nums)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> nums[mid] &gt;= nums[start] {</span><br><span class="line">start = mid</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] &lt;= nums[end] {</span><br><span class="line">end = mid</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> nums[mid]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h6 id="完整代码请参考-https-github-com-luckydog612-algorithm"><a href="#完整代码请参考-https-github-com-luckydog612-algorithm" class="headerlink" title="完整代码请参考:https://github.com/luckydog612/algorithm"></a>完整代码请参考:<a href="https://github.com/luckydog612/algorithm">https://github.com/luckydog612/algorithm</a></h6>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h3 id=&quot;题目描述：&quot;&gt;&lt;a href=&quot;#题目描述：&quot; class=&quot;headerlink&quot; title=&quot;题目描述：&quot;&gt;&lt;/a&gt;题目描述：&lt;/h3&gt;&lt;p&gt;题目：把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的</summary>
      
    
    
    
    <category term="算法" scheme="https://www.echaser.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法 数组" scheme="https://www.echaser.cn/tags/%E7%AE%97%E6%B3%95-%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>重建二叉树(Golang)《剑指offer》</title>
    <link href="https://www.echaser.cn/2019/07/20/chong-jian-er-cha-shu-golang-jian-zhi-offer/"/>
    <id>https://www.echaser.cn/2019/07/20/chong-jian-er-cha-shu-golang-jian-zhi-offer/</id>
    <published>2019-07-20T10:32:06.000Z</published>
    <updated>2022-06-27T01:52:06.432Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>输入某个二叉树的前序遍历和中序遍历的结果，请重建该二叉树。<br>假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如：输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建如图所示的二叉树并输出它的头节点。</p><p><img src="https://img-blog.csdnimg.cn/20190720180751920.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70"></p><h4 id="主要代码如下："><a href="#主要代码如下：" class="headerlink" title="主要代码如下："></a>主要代码如下：</h4><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> BinaryTreeNode <span class="keyword">struct</span> {</span><br><span class="line">Value     <span class="type">int</span></span><br><span class="line">LeftNode  *BinaryTreeNode</span><br><span class="line">RightNode *BinaryTreeNode</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewBinaryTreeNode</span><span class="params">(value <span class="type">int</span>)</span></span> *BinaryTreeNode {</span><br><span class="line"><span class="keyword">return</span> &amp;BinaryTreeNode{Value: value}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateTreeConstruct</span><span class="params">(preorder []<span class="type">int</span>, inorder []<span class="type">int</span>)</span></span> *BinaryTreeNode {</span><br><span class="line"><span class="keyword">if</span> preorder == <span class="literal">nil</span> || inorder == <span class="literal">nil</span> {</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> createTreeConstruct(preorder, <span class="number">0</span>, <span class="built_in">len</span>(preorder)<span class="number">-1</span>, inorder, <span class="number">0</span>, <span class="built_in">len</span>(inorder)<span class="number">-1</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数：前序遍历数组，前序起始位置，中序遍历数组，中序起始位置</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createTreeConstruct</span><span class="params">(preorder []<span class="type">int</span>, preStart <span class="type">int</span>, preEnd <span class="type">int</span>, inorder []<span class="type">int</span>, inStart <span class="type">int</span>, inEnd <span class="type">int</span>)</span></span> *BinaryTreeNode {</span><br><span class="line"><span class="keyword">if</span> preStart &gt; preEnd || inStart &gt; inEnd {</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">// 前序遍历序列的第一个数字是根节点的值</span></span><br><span class="line">root := NewBinaryTreeNode(preorder[preStart])</span><br><span class="line"><span class="comment">// 找到中序遍历数组中根节点的位置</span></span><br><span class="line"><span class="keyword">var</span> rootIndex <span class="type">int</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(inorder); i++ {</span><br><span class="line"><span class="keyword">if</span> inorder[i] == root.Value {</span><br><span class="line">rootIndex = i</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 计算左子树和右子树的节点数</span></span><br><span class="line">leftCount := rootIndex - inStart</span><br><span class="line"><span class="comment">//rightCount := inEnd - rootIndex</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 左子树递归</span></span><br><span class="line">root.LeftNode = createTreeConstruct(preorder, preStart+<span class="number">1</span>, preStart+leftCount, inorder, inStart, rootIndex<span class="number">-1</span>)</span><br><span class="line">root.RightNode = createTreeConstruct(preorder, preStart+leftCount+<span class="number">1</span>, preEnd, inorder, rootIndex+<span class="number">1</span>, inEnd)</span><br><span class="line"><span class="keyword">return</span> root</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printPreOrder</span><span class="params">(root *BinaryTreeNode, order []<span class="type">int</span>)</span></span> []<span class="type">int</span> {</span><br><span class="line"><span class="keyword">if</span> root == <span class="literal">nil</span> {</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">}</span><br><span class="line">order = <span class="built_in">append</span>(order, root.Value)</span><br><span class="line"><span class="keyword">if</span> root.LeftNode != <span class="literal">nil</span> {</span><br><span class="line">order = printPreOrder(root.LeftNode, order)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> root.RightNode != <span class="literal">nil</span> {</span><br><span class="line">order = printPreOrder(root.RightNode, order)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> order</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printInOrder</span><span class="params">(root *BinaryTreeNode, order []<span class="type">int</span>)</span></span> []<span class="type">int</span> {</span><br><span class="line"><span class="keyword">if</span> root == <span class="literal">nil</span> {</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> root.LeftNode != <span class="literal">nil</span> {</span><br><span class="line">order = printInOrder(root.LeftNode, order)</span><br><span class="line">}</span><br><span class="line">order = <span class="built_in">append</span>(order, root.Value)</span><br><span class="line"><span class="keyword">if</span> root.RightNode != <span class="literal">nil</span> {</span><br><span class="line">order = printInOrder(root.RightNode, order)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> order</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>写完代码之后又写了前序遍历和中序遍历自己测试了一下，结果是对的。分析过程就不写了，那本书上写的很详细，如果还是不懂的可以评论联系我。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">说明：前序遍历的数组中第一个位置是根节点，中序遍历数组中根节点的左边第左子树，右边是右子树。</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h4 id=&quot;题目描述：&quot;&gt;&lt;a href=&quot;#题目描述：&quot; class=&quot;headerlink&quot; title=&quot;题目描述：&quot;&gt;&lt;/a&gt;题目描述：&lt;/h4&gt;&lt;p&gt;输入某个二叉树的前序遍历和中序遍历的结果，请重建该二叉树。&lt;br&gt;</summary>
      
    
    
    
    <category term="算法" scheme="https://www.echaser.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://www.echaser.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 128. 最长连续序列(Golang)</title>
    <link href="https://www.echaser.cn/2019/07/11/leetcode-128.zui-chang-lian-xu-xu-lie-golang/"/>
    <id>https://www.echaser.cn/2019/07/11/leetcode-128.zui-chang-lian-xu-xu-lie-golang/</id>
    <published>2019-07-11T02:42:57.000Z</published>
    <updated>2022-06-27T01:52:06.432Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>给定一个未排序的整数数组，找出最长连续序列的长度。</p><p>要求算法的时间复杂度为 O(n)。</p><p>示例:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [100, 4, 200, 1, 3, 2]</span><br><span class="line">输出: 4</span><br></pre></td></tr></tbody></table></figure><p>解释: 最长连续序列是 [1, 2, 3, 4]。它的长度为 4。</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestConsecutive</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">int</span> {</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(nums) &lt;= <span class="number">1</span> {</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(nums)</span><br><span class="line">}</span><br><span class="line">sort.Ints(nums)</span><br><span class="line">length := <span class="number">1</span></span><br><span class="line">leng := <span class="number">1</span></span><br><span class="line">first := nums[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(nums); i++ {</span><br><span class="line"><span class="keyword">if</span> nums[i] == first {</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> nums[i] == first+<span class="number">1</span> {</span><br><span class="line">first = nums[i]</span><br><span class="line">leng++</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line"><span class="keyword">if</span> leng &gt; length {</span><br><span class="line">length = leng</span><br><span class="line">}</span><br><span class="line">first = nums[i]</span><br><span class="line">leng = <span class="number">1</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="type">int</span>(math.Max(<span class="type">float64</span>(length), <span class="type">float64</span>(leng)))</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;给定一个未排序的整数数组，找出最长连续序列的长度。&lt;/p&gt;
&lt;p&gt;要求算法的时间复杂度为 O(n)。&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tb</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://www.echaser.cn/categories/LeetCode/"/>
    
    
  </entry>
  
  <entry>
    <title>EKT搭建私链</title>
    <link href="https://www.echaser.cn/2019/01/02/ekt-da-jian-si-lian/"/>
    <id>https://www.echaser.cn/2019/01/02/ekt-da-jian-si-lian/</id>
    <published>2019-01-02T14:41:09.000Z</published>
    <updated>2022-06-27T01:52:06.432Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h5 id="1-首先，打开终端，将目录切换到EKT路径下，输入命令make，此命令会编译EKT项目cmd包下的两个main-go文件"><a href="#1-首先，打开终端，将目录切换到EKT路径下，输入命令make，此命令会编译EKT项目cmd包下的两个main-go文件" class="headerlink" title="1.首先，打开终端，将目录切换到EKT路径下，输入命令make，此命令会编译EKT项目cmd包下的两个main.go文件"></a>1.首先，打开终端，将目录切换到<code>EKT</code>路径下，输入命令<code>make</code>，此命令会编译<code>EKT</code>项目<code>cmd</code>包下的两个<code>main.go</code>文件</h5><h5 id="2-编译完成之后，会在EKT目录下产生一个bin目录，将路径切换到bin目录中，新建一个创世区块文件genesis-json，内容类似下面这样"><a href="#2-编译完成之后，会在EKT目录下产生一个bin目录，将路径切换到bin目录中，新建一个创世区块文件genesis-json，内容类似下面这样" class="headerlink" title="2.编译完成之后，会在EKT目录下产生一个bin目录，将路径切换到bin目录中，新建一个创世区块文件genesis.json，内容类似下面这样"></a>2.编译完成之后，会在<code>EKT</code>目录下产生一个<code>bin</code>目录，将路径切换到<code>bin</code>目录中，新建一个创世区块文件<code>genesis.json</code>，内容类似下面这样</h5><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"version"</span><span class="punctuation">:</span> <span class="string">"v2.0"</span><span class="punctuation">,</span>  <span class="comment">//版本号</span></span><br><span class="line">    <span class="attr">"dbPath"</span><span class="punctuation">:</span> <span class="string">"db/"</span><span class="punctuation">,</span>    <span class="comment">//数据库路径</span></span><br><span class="line">    <span class="attr">"logPath"</span><span class="punctuation">:</span> <span class="string">"log/ekt8.log"</span><span class="punctuation">,</span> <span class="comment">// 日志路径</span></span><br><span class="line">    <span class="attr">"debug"</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span>  <span class="comment">//是否开启debug模式</span></span><br><span class="line">    <span class="attr">"env"</span><span class="punctuation">:</span> <span class="string">"localnet"</span><span class="punctuation">,</span> <span class="comment">//网络配置</span></span><br><span class="line">    <span class="attr">"node"</span><span class="punctuation">:</span> <span class="punctuation">{</span>  <span class="comment">// 本地节点</span></span><br><span class="line">        <span class="attr">"account"</span><span class="punctuation">:</span> <span class="string">"56b92dfdbfbd7d32ea5deb6ca05ea8d695ed727c9d9a7536e345646608e339dc"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"address"</span><span class="punctuation">:</span> <span class="string">"localhost"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"port"</span><span class="punctuation">:</span> <span class="number">19951</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"addressVersion"</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span><span class="comment">// 下面是创世区块中的账户信息，设为自己的节点账号</span></span><br><span class="line">    <span class="attr">"privateKey"</span><span class="punctuation">:</span> <span class="string">"a9bdb75fa6f706e3b95d7b5c01bc9b4a546392782d2cf593e04c13d1faa9f01e"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"genesisBlock"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"address"</span><span class="punctuation">:</span> <span class="string">"56b92dfdbfbd7d32ea5deb6ca05ea8d695ed727c9d9a7536e345646608e339dc"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"amount"</span><span class="punctuation">:</span> <span class="number">50000000000000000</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><h5 id="3-同样在bin目录下创建一个localnet-json，内容如下"><a href="#3-同样在bin目录下创建一个localnet-json，内容如下" class="headerlink" title="3.同样在bin目录下创建一个localnet.json，内容如下"></a>3.同样在<code>bin</code>目录下创建一个<code>localnet.json</code>，内容如下</h5><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">[</span><span class="string">"56b92dfdbfbd7d32ea5deb6ca05ea8d695ed727c9d9a7536e345646608e339dc"</span><span class="punctuation">,</span> <span class="string">"localhost"</span><span class="punctuation">,</span> <span class="number">19951</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></tbody></table></figure><h5 id="4-我们会发现bin目录下还有两个文件，一个是ecli，另外一个是enode，这两个都是可执行文件，可以用-ecli-account-new命令来创建账号"><a href="#4-我们会发现bin目录下还有两个文件，一个是ecli，另外一个是enode，这两个都是可执行文件，可以用-ecli-account-new命令来创建账号" class="headerlink" title="4.我们会发现bin目录下还有两个文件，一个是ecli，另外一个是enode，这两个都是可执行文件，可以用./ecli account new命令来创建账号"></a>4.我们会发现<code>bin</code>目录下还有两个文件，一个是<code>ecli</code>，另外一个是<code>enode</code>，这两个都是可执行文件，可以用<code>./ecli account new</code>命令来创建账号</h5><p><img src="https://img-blog.csdnimg.cn/20181221193946715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70" alt="创建账号"></p><h5 id="5-接下来启动EKT：在终端输入-enode，EKT私链搭建完成-当前窗口不要关闭，进行转账等其他命令时，要新建一个终端"><a href="#5-接下来启动EKT：在终端输入-enode，EKT私链搭建完成-当前窗口不要关闭，进行转账等其他命令时，要新建一个终端" class="headerlink" title="5.接下来启动EKT：在终端输入./enode，EKT私链搭建完成(当前窗口不要关闭，进行转账等其他命令时，要新建一个终端)"></a>5.接下来启动<code>EKT</code>：在终端输入<code>./enode</code>，<code>EKT</code>私链搭建完成(当前窗口不要关闭，进行转账等其他命令时，要新建一个终端)</h5><p><img src="https://img-blog.csdnimg.cn/20181221194028266.png" alt="启动EKT"><br>EKT还有一些命令：</p><h4 id="ecli相关"><a href="#ecli相关" class="headerlink" title="ecli相关"></a>ecli相关</h4><p>转账交易：<code>./ecli transaction send</code><br>1.输入私钥<br>2.输入币种，可不输入，默认<code>EKT</code><br>3.输入转账金额，注意这里说的金额以最小值为单位的，比如你要转<code>10</code>个<code>EKT</code>，需要输入1000000000(后面有<code>8</code>个<code>0</code>)<br>4.输入收款方地址<br>5.输入转账备注内容<br>终端会输出一个<code>json</code>字符串，复制<code>result</code>后面的字符串(交易地址)，打开浏览器，输入<code>http://localhost:19951/db/api/getByHex?hash=txId(刚才复制的内容)</code>即可查询交易详情<br><img src="https://img-blog.csdnimg.cn/20181221194558492.png" alt="转账"><br><img src="https://img-blog.csdnimg.cn/20181221194058732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70" alt="交易详情"></p><h4 id="enode相关"><a href="#enode相关" class="headerlink" title="enode相关"></a>enode相关</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./enode -h 帮助</span><br><span class="line">./enode -v 输出版本并退出</span><br><span class="line">./enode -m 同步模式：`full sync`,`fast sync`或者`delegate`，默认`adaptive`</span><br><span class="line">./enode -c 设置`genesis.json`并启动，默认当前目录下的`genesis.json`</span><br></pre></td></tr></tbody></table></figure><p>EKT官网：<a href="https://ekt8.io/">https://ekt8.io/</a><br>源码地址：<a href="https://github.com/EducationEKT/EKT">https://github.com/EducationEKT/EKT</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h5 id=&quot;1-首先，打开终端，将目录切换到EKT路径下，输入命令make，此命令会编译EKT项目cmd包下的两个main-go文件&quot;&gt;&lt;a href=&quot;#1-首先，打开终端，将目录切换到EKT路径下，输入命令make，此命令</summary>
      
    
    
    
    <category term="区块链" scheme="https://www.echaser.cn/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
    <category term="区块链 EKT" scheme="https://www.echaser.cn/tags/%E5%8C%BA%E5%9D%97%E9%93%BE-EKT/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 234. 回文链表(Golang)</title>
    <link href="https://www.echaser.cn/2018/11/06/leetcode-234.hui-wen-lian-biao-golang/"/>
    <id>https://www.echaser.cn/2018/11/06/leetcode-234.hui-wen-lian-biao-golang/</id>
    <published>2018-11-06T14:10:48.000Z</published>
    <updated>2022-06-27T01:52:06.432Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>请判断一个链表是否为回文链表。</p><p>示例 1:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 1-&gt;2</span><br><span class="line">输出: false</span><br></pre></td></tr></tbody></table></figure><p>示例 2:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;2-&gt;1</span><br><span class="line">输出: true</span><br></pre></td></tr></tbody></table></figure><p>进阶：<br>你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？</p><p>思路：遍历链表，将所有节点按顺序存储到<code>map</code>集合中，通过<code>map</code>的键从两头开始遍历对比，值不相等返回<code>false</code>。</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPalindrome</span><span class="params">(head *ListNode)</span></span> <span class="type">bool</span> {</span><br><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]*ListNode)</span><br><span class="line">i := <span class="number">0</span></span><br><span class="line">m = TraverListNode(head, m, i)</span><br><span class="line">start := <span class="number">0</span></span><br><span class="line">end := <span class="built_in">len</span>(m) - <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> start &lt;= end {</span><br><span class="line"><span class="keyword">if</span> m[start].Val != m[end].Val {</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">}</span><br><span class="line">start++</span><br><span class="line">end--</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TraverListNode</span><span class="params">(head *ListNode, m <span class="keyword">map</span>[<span class="type">int</span>]*ListNode, i <span class="type">int</span>)</span></span> <span class="keyword">map</span>[<span class="type">int</span>]*ListNode {</span><br><span class="line"><span class="keyword">if</span> head == <span class="literal">nil</span> {</span><br><span class="line"><span class="keyword">return</span> m</span><br><span class="line">}</span><br><span class="line">m[i] = head</span><br><span class="line">i++</span><br><span class="line"><span class="keyword">return</span> TraverListNode(head.Next, m, i)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;请判断一个链表是否为回文链表。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://www.echaser.cn/categories/LeetCode/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 17. 电话号码的字母组合(Golang)</title>
    <link href="https://www.echaser.cn/2018/10/29/leetcode-17.dian-hua-hao-ma-de-zi-mu-zu-he-golang/"/>
    <id>https://www.echaser.cn/2018/10/29/leetcode-17.dian-hua-hao-ma-de-zi-mu-zu-he-golang/</id>
    <published>2018-10-29T14:02:53.000Z</published>
    <updated>2022-06-27T01:52:06.432Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。</p><p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p><p><img src="https://img-blog.csdnimg.cn/20181029220141185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>示例:</p><p>输入：“23”<br>输出：[“ad”, “ae”, “af”, “bd”, “be”, “bf”, “cd”, “ce”, “cf”].<br><strong>说明:</strong><br>尽管上面的答案是按字典序排列的，但是你可以任意选择答案输出的顺序。</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">letterCombinations</span><span class="params">(digits <span class="type">string</span>)</span></span> []<span class="type">string</span> {</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(digits)==<span class="number">0</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    }</span><br><span class="line">    m := <span class="keyword">map</span>[<span class="type">byte</span>][]<span class="type">string</span>{</span><br><span class="line"><span class="string">'2'</span>: {<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>},</span><br><span class="line"><span class="string">'3'</span>: {<span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>},</span><br><span class="line"><span class="string">'4'</span>: {<span class="string">"g"</span>, <span class="string">"h"</span>, <span class="string">"i"</span>},</span><br><span class="line"><span class="string">'5'</span>: {<span class="string">"j"</span>, <span class="string">"k"</span>, <span class="string">"l"</span>},</span><br><span class="line"><span class="string">'6'</span>: {<span class="string">"m"</span>, <span class="string">"n"</span>, <span class="string">"o"</span>},</span><br><span class="line"><span class="string">'7'</span>: {<span class="string">"p"</span>, <span class="string">"q"</span>, <span class="string">"r"</span>, <span class="string">"s"</span>},</span><br><span class="line"><span class="string">'8'</span>: {<span class="string">"t"</span>, <span class="string">"u"</span>, <span class="string">"v"</span>},</span><br><span class="line"><span class="string">'9'</span>: {<span class="string">"w"</span>, <span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"z"</span>},</span><br><span class="line">}</span><br><span class="line">s := m[digits[<span class="number">0</span>]]</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(digits); i++ {</span><br><span class="line">temp := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="built_in">len</span>(s); j++ {</span><br><span class="line"><span class="keyword">for</span> k := <span class="number">0</span>; k &lt; <span class="built_in">len</span>(m[digits[i]]); k++ {</span><br><span class="line">temp = <span class="built_in">append</span>(temp, s[j] + m[digits[i]][k])</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">s = temp</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。&lt;/p&gt;
&lt;p&gt;给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.c</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://www.echaser.cn/categories/LeetCode/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 11. 盛最多水的容器(Golang)</title>
    <link href="https://www.echaser.cn/2018/10/29/leetcode-11.sheng-zui-duo-shui-de-rong-qi-golang/"/>
    <id>https://www.echaser.cn/2018/10/29/leetcode-11.sheng-zui-duo-shui-de-rong-qi-golang/</id>
    <published>2018-10-29T14:00:13.000Z</published>
    <updated>2022-06-27T01:52:06.432Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>给定 n 个非负整数<code>a1，a2，...，an</code>，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p><p><strong>说明</strong>：你不能倾斜容器，且 n 的值至少为 2。</p><p><img src="https://img-blog.csdnimg.cn/20181029215852968.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1Y2t5ZG9nNjEy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</p><p>示例:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,8,6,2,5,4,8,3,7]</span><br><span class="line">输出: 49</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxArea</span><span class="params">(height []<span class="type">int</span>)</span></span> <span class="type">int</span> {</span><br><span class="line">s := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= <span class="built_in">len</span>(height); i++ {</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="built_in">len</span>(height); j++ {</span><br><span class="line"><span class="keyword">if</span> i &lt; j {</span><br><span class="line">area := (j - i) * (minNum(height[i], height[j]))</span><br><span class="line">                <span class="keyword">if</span> area&gt;s[<span class="number">0</span>]{</span><br><span class="line">                    s[<span class="number">0</span>] = area</span><br><span class="line">                }</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> s[<span class="number">0</span>]</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minNum</span><span class="params">(i, j <span class="type">int</span>)</span></span> <span class="type">int</span> {</span><br><span class="line"><span class="keyword">if</span> i &gt; j {</span><br><span class="line"><span class="keyword">return</span> j</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;给定 n 个非负整数&lt;code&gt;a1，a2，...，an&lt;/code&gt;，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://www.echaser.cn/categories/LeetCode/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 8. 字符串转整数 (atoi)(Golang)</title>
    <link href="https://www.echaser.cn/2018/10/29/leetcode-8.zi-fu-chuan-zhuan-zheng-shu-atoi-golang/"/>
    <id>https://www.echaser.cn/2018/10/29/leetcode-8.zi-fu-chuan-zhuan-zheng-shu-atoi-golang/</id>
    <published>2018-10-29T13:56:19.000Z</published>
    <updated>2022-06-27T01:52:06.432Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>实现 <code>atoi</code>，将字符串转为整数。</p><p>该函数首先根据需要丢弃任意多的空格字符，直到找到第一个非空格字符为止。如果第一个非空字符是正号或负号，选取该符号，并将其与后面尽可能多的连续的数字组合起来，这部分字符即为整数的值。如果第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。</p><p>字符串可以在形成整数的字符后面包括多余的字符，这些字符可以被忽略，它们对于函数没有影响。</p><p>当字符串中的第一个非空字符序列不是个有效的整数；或字符串为空；或字符串仅包含空白字符时，则不进行转换。</p><p>若函数不能执行有效的转换，返回 0。</p><p>说明：</p><p>假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231, 231 − 1]。如果数值超过可表示的范围，则返回 INT_MAX (231 − 1) 或 INT_MIN (−231) 。</p><p>示例 1:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: "42"</span><br><span class="line">输出: 42</span><br></pre></td></tr></tbody></table></figure><p>示例 2:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: "   -42"</span><br><span class="line">输出: -42</span><br><span class="line">解释: 第一个非空白字符为 '-', 它是一个负号。</span><br><span class="line">     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。</span><br></pre></td></tr></tbody></table></figure><p>示例 3:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: "4193 with words"</span><br><span class="line">输出: 4193</span><br><span class="line">解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。</span><br></pre></td></tr></tbody></table></figure><p>示例 4:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: "words and 987"</span><br><span class="line">输出: 0</span><br><span class="line">解释: 第一个非空字符是 'w', 但它不是数字或正、负号。</span><br><span class="line">     因此无法执行有效的转换。</span><br></pre></td></tr></tbody></table></figure><p>示例 5:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: "-91283472332"</span><br><span class="line">输出: -2147483648</span><br><span class="line">解释: 数字 "-91283472332" 超过 32 位有符号整数范围。 </span><br><span class="line">     因此返回 INT_MIN (−231) 。</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myAtoi</span><span class="params">(str <span class="type">string</span>)</span></span> <span class="type">int</span> {</span><br><span class="line">num := <span class="number">0</span></span><br><span class="line">s := <span class="string">""</span></span><br><span class="line">flag := <span class="literal">false</span></span><br><span class="line">str = strings.TrimSpace(str)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(str) == <span class="number">0</span> {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(str); i++ {</span><br><span class="line"><span class="keyword">if</span> !(str[i] &gt;= <span class="string">'0'</span> &amp;&amp; str[i] &lt;= <span class="string">'9'</span>) &amp;&amp; !(str[i] == <span class="string">'+'</span> || str[i] == <span class="string">'-'</span>) {</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> str[i] == <span class="string">'+'</span>{</span><br><span class="line"><span class="keyword">if</span> flag ||s != <span class="string">""</span>{</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">}</span><br><span class="line">flag = <span class="literal">true</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> str[i] == <span class="string">'-'</span> {</span><br><span class="line"><span class="keyword">if</span> flag || s != <span class="string">""</span> {</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">}</span><br><span class="line">flag = <span class="literal">true</span></span><br><span class="line">s += <span class="string">"-"</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line">s += <span class="type">string</span>(str[i])</span><br><span class="line">}</span><br><span class="line">num, _ = strconv.Atoi(s)</span><br><span class="line"><span class="keyword">if</span> num &gt; math.MaxInt32 {</span><br><span class="line"><span class="keyword">return</span> math.MaxInt32</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> num &lt; math.MinInt32 {</span><br><span class="line"><span class="keyword">return</span> math.MinInt32</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> num</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;实现 &lt;code&gt;atoi&lt;/code&gt;，将字符串转为整数。&lt;/p&gt;
&lt;p&gt;该函数首先根据需要丢弃任意多的空格字符，直到找到第一个非空格字符为止。如果第一个非空字符是正号或负号，选取该符号，并将其与后面尽可能多的连续的数字组</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://www.echaser.cn/categories/LeetCode/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode  628. 三个数的最大乘积(Golang)</title>
    <link href="https://www.echaser.cn/2018/10/22/leetcode-628.san-ge-shu-de-zui-da-cheng-ji-golang/"/>
    <id>https://www.echaser.cn/2018/10/22/leetcode-628.san-ge-shu-de-zui-da-cheng-ji-golang/</id>
    <published>2018-10-22T13:41:16.000Z</published>
    <updated>2022-06-27T01:52:06.433Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>给定一个整型数组，在数组中找出由三个数组成的最大乘积，并输出这个乘积。</p><p>示例 1:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,2,3]</span><br><span class="line">输出: 6</span><br></pre></td></tr></tbody></table></figure><p>示例 2:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,2,3,4]</span><br><span class="line">输出: 24</span><br></pre></td></tr></tbody></table></figure><p>注意:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.给定的整型数组长度范围是[3,104]，数组中所有的元素范围是[-1000, 1000]。</span><br><span class="line">2.输入的数组中任意三个数的乘积不会超出32位有符号整数的范围。</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maximumProduct</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">int</span> {</span><br><span class="line">    sort.Ints(nums)</span><br><span class="line">length := <span class="built_in">len</span>(nums)</span><br><span class="line">a := nums[length<span class="number">-1</span>] * nums[length<span class="number">-2</span>] * nums[length<span class="number">-3</span>]</span><br><span class="line">b := nums[<span class="number">0</span>] * nums[<span class="number">1</span>] * nums[length<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">if</span> a &gt; b {</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;给定一个整型数组，在数组中找出由三个数组成的最大乘积，并输出这个乘积。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td c</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://www.echaser.cn/categories/LeetCode/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode  441. 排列硬币(Golang)</title>
    <link href="https://www.echaser.cn/2018/10/22/leetcode-441.pai-lie-ying-bi-golang/"/>
    <id>https://www.echaser.cn/2018/10/22/leetcode-441.pai-lie-ying-bi-golang/</id>
    <published>2018-10-22T13:37:36.000Z</published>
    <updated>2022-06-27T01:52:06.432Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>你总共有 n 枚硬币，你需要将它们摆成一个阶梯形状，第 k 行就必须正好有 k 枚硬币。</p><p>给定一个数字 n，找出可形成完整阶梯行的总行数。</p><p>n 是一个非负整数，并且在32位有符号整型的范围内。</p><p>示例 1:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n = 5</span><br><span class="line"></span><br><span class="line">硬币可排列成以下几行:</span><br><span class="line">¤</span><br><span class="line">¤ ¤</span><br><span class="line">¤ ¤</span><br><span class="line"></span><br><span class="line">因为第三行不完整，所以返回2.</span><br></pre></td></tr></tbody></table></figure><p>示例 2:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">n = 8</span><br><span class="line"></span><br><span class="line">硬币可排列成以下几行:</span><br><span class="line">¤</span><br><span class="line">¤ ¤</span><br><span class="line">¤ ¤ ¤</span><br><span class="line">¤ ¤</span><br><span class="line"></span><br><span class="line">因为第四行不完整，所以返回3.</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">arrangeCoins</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">int</span> {</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; ; i++ {</span><br><span class="line"><span class="keyword">if</span> n == i {</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> n &lt; i {</span><br><span class="line"><span class="keyword">return</span> i - <span class="number">1</span></span><br><span class="line">}<span class="keyword">else</span> {</span><br><span class="line">n = n - i</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;你总共有 n 枚硬币，你需要将它们摆成一个阶梯形状，第 k 行就必须正好有 k 枚硬币。&lt;/p&gt;
&lt;p&gt;给定一个数字 n，找出可形成完整阶梯行的总行数。&lt;/p&gt;
&lt;p&gt;n 是一个非负整数，并且在32位有符号整型的范围内。&lt;/</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://www.echaser.cn/categories/LeetCode/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode  258. 各位相加(Golang)</title>
    <link href="https://www.echaser.cn/2018/10/22/leetcode-258.ge-wei-xiang-jia-golang/"/>
    <id>https://www.echaser.cn/2018/10/22/leetcode-258.ge-wei-xiang-jia-golang/</id>
    <published>2018-10-22T13:34:00.000Z</published>
    <updated>2022-06-27T01:52:06.432Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>给定一个非负整数 num，反复将各个位上的数字相加，直到结果为一位数。</p><p>示例:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: 38</span><br><span class="line">输出: 2 </span><br><span class="line">解释: 各位相加的过程为：3 + 8 = 11, 1 + 1 = 2。 由于 2 是一位数，所以返回 2。</span><br></pre></td></tr></tbody></table></figure><p>进阶:<br>你可以不使用循环或者递归，且在 O(1) 时间复杂度内解决这个问题吗？</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addDigits</span><span class="params">(num <span class="type">int</span>)</span></span> <span class="type">int</span> {</span><br><span class="line"><span class="keyword">for</span> num &gt; <span class="number">9</span> {</span><br><span class="line">str := fmt.Sprintf(<span class="string">"%d"</span>, num)</span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _, i := <span class="keyword">range</span> str {</span><br><span class="line">j, _ := strconv.Atoi(<span class="type">string</span>(i))</span><br><span class="line">num += j</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> num</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;给定一个非负整数 num，反复将各个位上的数字相加，直到结果为一位数。&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td cla</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://www.echaser.cn/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="https://www.echaser.cn/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode  19. 删除链表的倒数第N个节点(Golang)</title>
    <link href="https://www.echaser.cn/2018/10/15/leetcode-19.shan-chu-lian-biao-de-dao-shu-di-n-ge-jie-dian-golang/"/>
    <id>https://www.echaser.cn/2018/10/15/leetcode-19.shan-chu-lian-biao-de-dao-shu-di-n-ge-jie-dian-golang/</id>
    <published>2018-10-15T11:16:48.000Z</published>
    <updated>2022-06-27T01:52:06.432Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。</p><p>示例：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n = 2.</span><br><span class="line"></span><br><span class="line">当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.</span><br></pre></td></tr></tbody></table></figure><p>说明：</p><p>给定的 n 保证是有效的。</p><p>进阶：</p><p>你能尝试使用一趟扫描实现吗？</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct {</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeNthFromEnd</span><span class="params">(head *ListNode, n <span class="type">int</span>)</span></span> *ListNode {</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span> || head == <span class="literal">nil</span> {</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line">    }</span><br><span class="line">    fast := head</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= n &amp;&amp; fast != <span class="literal">nil</span>; i++{</span><br><span class="line">        fast = fast.Next</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> fast == <span class="literal">nil</span> {</span><br><span class="line">        <span class="keyword">return</span> head.Next</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    slow := head</span><br><span class="line">    <span class="keyword">for</span> fast.Next != <span class="literal">nil</span> {</span><br><span class="line">        slow = slow.Next</span><br><span class="line">        fast = fast.Next</span><br><span class="line">    }</span><br><span class="line">    slow.Next = slow.Next.Next</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://www.echaser.cn/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="https://www.echaser.cn/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode  414. 第三大的数(Golang)</title>
    <link href="https://www.echaser.cn/2018/10/13/leetcode-414.di-san-da-de-shu-golang/"/>
    <id>https://www.echaser.cn/2018/10/13/leetcode-414.di-san-da-de-shu-golang/</id>
    <published>2018-10-13T10:26:50.000Z</published>
    <updated>2022-06-27T01:52:06.432Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>给定一个非空数组，返回此数组中第三大的数。如果不存在，则返回数组中最大的数。要求算法时间复杂度必须是O(n)。</p><p>示例 1:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: [3, 2, 1]</span><br><span class="line"></span><br><span class="line">输出: 1</span><br><span class="line"></span><br><span class="line">解释: 第三大的数是 1.</span><br></pre></td></tr></tbody></table></figure><p>示例 2:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: [1, 2]</span><br><span class="line"></span><br><span class="line">输出: 2</span><br><span class="line"></span><br><span class="line">解释: 第三大的数不存在, 所以返回最大的数 2 .</span><br></pre></td></tr></tbody></table></figure><p>示例 3:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入: [2, 2, 3, 1]</span><br><span class="line"></span><br><span class="line">输出: 1</span><br><span class="line"></span><br><span class="line">解释: 注意，要求返回第三大的数，是指第三大且唯一出现的数。</span><br><span class="line">存在两个值为2的数，它们都排第二。</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">thirdMax</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">int</span> {</span><br><span class="line">    n := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>)</span><br><span class="line">sort.Ints(nums)</span><br><span class="line">i := <span class="number">0</span></span><br><span class="line">n = <span class="built_in">append</span>(n, nums[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">1</span>; j &lt; <span class="built_in">len</span>(nums); j++ {</span><br><span class="line"><span class="keyword">if</span> nums[i] != nums[j] {</span><br><span class="line">n = <span class="built_in">append</span>(n, nums[j])</span><br><span class="line">i++</span><br><span class="line">nums[i] = nums[j]</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">ln := <span class="built_in">len</span>(n)</span><br><span class="line"><span class="keyword">if</span> ln &lt;= <span class="number">2</span> {</span><br><span class="line"><span class="keyword">return</span> n[ln<span class="number">-1</span>]</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> n[ln<span class="number">-3</span>]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;给定一个非空数组，返回此数组中第三大的数。如果不存在，则返回数组中最大的数。要求算法时间复杂度必须是O(n)。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;ta</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://www.echaser.cn/categories/LeetCode/"/>
    
    
    <category term="LeetCode Golang" scheme="https://www.echaser.cn/tags/LeetCode-Golang/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode  338. 比特位计数(Golang)</title>
    <link href="https://www.echaser.cn/2018/10/11/leetcode-338.bi-te-wei-ji-shu-golang/"/>
    <id>https://www.echaser.cn/2018/10/11/leetcode-338.bi-te-wei-ji-shu-golang/</id>
    <published>2018-10-11T15:13:05.000Z</published>
    <updated>2022-06-27T01:52:06.432Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>给定一个非负整数 num。对于 0 ≤ i ≤ num 范围中的每个数字 i ，计算其二进制数中的 1 的数目并将它们作为数组返回。</p><p>示例 1:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 2</span><br><span class="line">输出: [0,1,1]</span><br></pre></td></tr></tbody></table></figure><p>示例 2:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 5</span><br><span class="line">输出: [0,1,1,2,1,2]</span><br></pre></td></tr></tbody></table></figure><p><strong>进阶:</strong></p><ul><li>给出时间复杂度为O(n*sizeof(integer))的解答非常容易。但你可以在线性时间O(n)内用一趟扫描做到吗？</li><li>要求算法的空间复杂度为O(n)。</li><li>你能进一步完善解法吗？要求在C++或任何其他语言中不使用任何内置函数（如 C++ 中的 __builtin_popcount）来执行此操作。</li></ul><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">countBits</span><span class="params">(num <span class="type">int</span>)</span></span> []<span class="type">int</span> {</span><br><span class="line">b := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>)</span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i &lt;= num {</span><br><span class="line"><span class="keyword">if</span> i == <span class="number">0</span> {</span><br><span class="line">b = <span class="built_in">append</span>(b, <span class="number">0</span>)</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> i &lt;= <span class="number">2</span> {</span><br><span class="line">b = <span class="built_in">append</span>(b, <span class="number">1</span>)</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">count := <span class="number">0</span></span><br><span class="line">by := dtob(i)</span><br><span class="line"><span class="keyword">for</span> _, j := <span class="keyword">range</span> by {</span><br><span class="line"><span class="keyword">if</span> j == <span class="number">1</span> {</span><br><span class="line">count++</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">b = <span class="built_in">append</span>(b, count)</span><br><span class="line">}</span><br><span class="line">i++</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dtob</span><span class="params">(num <span class="type">int</span>)</span></span> []<span class="type">int</span> {</span><br><span class="line">a := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> num != <span class="number">0</span> {</span><br><span class="line">i := num % <span class="number">2</span></span><br><span class="line">a = <span class="built_in">append</span>(a, i)</span><br><span class="line">num = num / <span class="number">2</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;给定一个非负整数 num。对于 0 ≤ i ≤ num 范围中的每个数字 i ，计算其二进制数中的 1 的数目并将它们作为数组返回。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;figure class=&quot;highlight pla</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://www.echaser.cn/categories/LeetCode/"/>
    
    
    <category term="LeetCode Golang" scheme="https://www.echaser.cn/tags/LeetCode-Golang/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode  104. 二叉树的最大深度(Golang)</title>
    <link href="https://www.echaser.cn/2018/10/11/leetcode-104.er-cha-shu-de-zui-da-shen-du-golang/"/>
    <id>https://www.echaser.cn/2018/10/11/leetcode-104.er-cha-shu-de-zui-da-shen-du-golang/</id>
    <published>2018-10-11T15:07:22.000Z</published>
    <updated>2022-06-27T01:52:06.432Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>给定一个二叉树，找出其最大深度。</p><p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p><p>说明: 叶子节点是指没有子节点的节点。</p><p>示例：<br>给定二叉树 [3,9,20,null,null,15,7]，</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></tbody></table></figure><p>返回它的最大深度 3 。</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * type TreeNode struct {</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Left *TreeNode</span></span><br><span class="line"><span class="comment"> *     Right *TreeNode</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxDepth</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> {</span><br><span class="line">    i := <span class="number">0</span></span><br><span class="line">j := <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> root == <span class="literal">nil</span> {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">}</span><br><span class="line">i = maxDepth(root.Left) + <span class="number">1</span></span><br><span class="line">j = maxDepth(root.Right) + <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> i &lt; j {</span><br><span class="line">i, j = j, i</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;给定一个二叉树，找出其最大深度。&lt;/p&gt;
&lt;p&gt;二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。&lt;/p&gt;
&lt;p&gt;说明: 叶子节点是指没有子节点的节点。&lt;/p&gt;
&lt;p&gt;示例：&lt;br&gt;给定二叉树 [3,9,20,null</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://www.echaser.cn/categories/LeetCode/"/>
    
    
    <category term="LeetCode Golang" scheme="https://www.echaser.cn/tags/LeetCode-Golang/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode  83. 删除排序链表中的重复元素(Golang)</title>
    <link href="https://www.echaser.cn/2018/10/11/leetcode-83.shan-chu-pai-xu-lian-biao-zhong-de-chong-fu-yuan-su-golang/"/>
    <id>https://www.echaser.cn/2018/10/11/leetcode-83.shan-chu-pai-xu-lian-biao-zhong-de-chong-fu-yuan-su-golang/</id>
    <published>2018-10-11T15:05:13.000Z</published>
    <updated>2022-06-27T01:52:06.432Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。</p><p>示例 1:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 1-&gt;1-&gt;2</span><br><span class="line">输出: 1-&gt;2</span><br></pre></td></tr></tbody></table></figure><p>示例 2:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 1-&gt;1-&gt;2-&gt;3-&gt;3</span><br><span class="line">输出: 1-&gt;2-&gt;3</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct {</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteDuplicates</span><span class="params">(head *ListNode)</span></span> *ListNode {</span><br><span class="line">    curr := head</span><br><span class="line"><span class="keyword">for</span> curr != <span class="literal">nil</span> &amp;&amp; curr.Next != <span class="literal">nil</span> {</span><br><span class="line"><span class="keyword">if</span> curr.Val == curr.Next.Val {</span><br><span class="line">curr.Next = curr.Next.Next</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">curr = curr.Next</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://www.echaser.cn/categories/LeetCode/"/>
    
    
    <category term="LeetCode Golang" scheme="https://www.echaser.cn/tags/LeetCode-Golang/"/>
    
  </entry>
  
</feed>
